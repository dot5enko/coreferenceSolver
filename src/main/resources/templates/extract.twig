<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Coreference resolution text tagger</title>
    </head>
    <body> 
        <div class="content" style="padding:10px;margin:0 auto; width:1300px;font-family:arial;text-align:justify;font-size:22px;line-height:30px"> 
            <div class="text col-md-8" id="text" >
            </div>
            <div class="selectedTags col-md-4"><h3>Selected tokens <span class="h6 curNp" style="color:#C7c7c7;font-weight:bold"></span></h3>
                <div id="currentStack">
                </div>
                <div class="stack-control-panel" style="display:none">
                    <div class="form-group">
                        <select class="entType form-control" >
                            <option value="1">PERSON</option>
                            <option value="2">ORGANISATION</option>
                            <option value="3">GEO</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-success saveSequence">Add</button>
                        <button class="btn btn-warning cancelSequence">Clear</button>
                    </div>
                </div>
            </div>
        </div>
        <script
            src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
            integrity="sha256-k2WSCIexGzOj3Euiig+TlR8gA0EmPjuc79OEeY5L45g="
        crossorigin="anonymous"></script>
        <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet"/>
        <style>

            #text > span:hover {
                cursor:pointer;
                background-color:#c7c7c7;
            }

            .sT { /* selected token */
                background-color: gray;
                color:white;
            }

            .sTag {
                padding:2px;
                border: 1px solid #efefef;
                margin:4px;
                display:inline-block;
            }

            .sTag .n {
                font-size:15px;
                color:red;
            }

            #currentStack {
                text-align:left;
                font-size:16px;
            }


            .npt1 {
                background-color:red;
                padding:3px;
                opacity:0.2;
                color:white;
            }

            .npt2 {
                background-color:brown;
                padding:3px;
                opacity:0.2;
                color:white;
            }

            .npt3 {
                background-color:blue;
                padding:3px;
                opacity:0.2;
                color:white;
            }



        </style>
        <script>

            var wordsStack = {};
            var stackLength = 0;
            var curNpId = null;
            var nps = {};

            // got from https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript
            function randomAlpha(length) {

                if (typeof length === 'undefined') {
                    length = 5;
                }

                var text = "";
                var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

                for (var i = 0; i < length; i++)
                    text += possible.charAt(Math.floor(Math.random() * possible.length));

                return text;
            }

            function clone(x) {
                return JSON.parse(JSON.stringify(x));
            }

            function clearStack(eCb) {

                for (var ind in wordsStack) {
                    $('.t' + ind).removeClass('sT');

                    if (typeof eCb !== 'undefined') { // pass current jQ obj to callback
                        eCb(ind);
                    }

                }

                stackLength = 0;

                var oldStack = clone(wordsStack);
                wordsStack = {};

                redrawCurrentStack(function (i, el) {
                    return "<div class=sTag><span class=n>" + i + "</span> " + el + "</div>";
                });

                curNpId = randomAlpha(8);

                console.log('new npId = ' + curNpId)

                return oldStack;
            }

            $('.saveSequence').on('click', function () {

                var npType = $('.entType').val();

                nps[curNpId] = {
                    val: clearStack(function (id) {
                        $(".t" + id).addClass('npt' + npType)
                        console.log('adding npt' + npType + " class ")
                    }),
                    type: npType
                };

                curNpId = randomAlpha(8);
                console.log('new npId = ' + curNpId)

            });

            $('.cancelSequence').on('click', function () {
                clearStack();
            });

            $('#text').on('click', 'span', function (e) {
                if (!e.ctrlKey) {
                    var nStack = clone(wordsStack);
                    nStack[$(this).data('t')] = $(this).text();
                    if (!checkStack(nStack)) {
                        wordsStack = fillStackProperly(nStack)
                    } else {

                        $(this).toggleClass('sT');
                        var tI = $(this).data('t');
                        if (typeof wordsStack[tI] != 'undefined') {
                            delete wordsStack[tI];
                            stackLength--;
                        } else {
                            wordsStack[tI] = $(this).text();
                            stackLength++;
                        }


                    }

                    redrawCurrentStack(function (i, el) {
                        return "<div class=sTag><span class=n>" + i + "</span> " + el + "</div>";
                    });
                } else {
                    alert(JSON.stringify($(this).data('forms')))

                }
            })

            document.addEventListener('keydown', function (event) {
                if (event.keyCode == 13) {
                    var neStack = Object.values(wordsStack).join(' ');
                    prompt("enter type of named entity matched `" + neStack + "` ");
                    console.log(neStack)

                    wordsStack = [];
                    stackLength = 0;
                }
            });
            /*
             * Checks whether stack contains tokens that are all siblings of each other
             */
            function checkStack(stack) {

                var prevIndex = 0;
                var cycleIndex = 0;
                for (var ind in stack) {
                    if (cycleIndex !== 0) {
                        if (parseInt(ind) - prevIndex > 1) {
                            return false;
                        }
                    }
                    prevIndex = parseInt(ind);
                    cycleIndex++;
                }
                return true;
            }

            /**
             * Fills the stack with all  selected items 
             * @param {type} stack
             * @returns {Boolean}
             */
            function fillStackProperly(stack) {

                var prevIndex = 0;
                var cycleIndex = 0;
                for (var ind in stack) {
                    if (cycleIndex !== 0) {
                        if (parseInt(ind) - prevIndex > 1) {
                            for (var i = prevIndex; i <= parseInt(ind); i++) {
                                stack[i] = $('.t' + i).text();
                                $('.t' + i).addClass('sT');
                            }
                        }
                    }
                    prevIndex = parseInt(ind);
                    cycleIndex++;
                }
                return stack;
            }


            function redrawCurrentStack(tokenVisitor) {
                var container = document.getElementById('currentStack')

                if (curNpId == null) {
                    curNpId = randomAlpha(8);
                }
                $('.curNp').text(curNpId)

                if (typeof tokenVisitor == 'undefined') {
                    tokenVisitor = function (i, e) {
                        return e;
                    }
                }

                var out = '';
                for (var ind in wordsStack) {
                    out += tokenVisitor(ind, wordsStack[ind]);
                }

                if (stackLength > 0) {
                    $('.stack-control-panel').show();
                } else {
                    $('.stack-control-panel').hide();
                }

                container.innerHTML = out;
            }


            function redrawNps() {

            }

            function getRandomColor() {
                return '#' + Math.random().toString(16).substring(9);
            }

            function constructTextFromTokens(tokens, tokenVisitor) {
                var ot = '';
                if (typeof tokenVisitor == 'undefined') {
                    tokenVisitor = function (i, e) {
                        return e.v;
                    }
                }

                var prevToken = tokens[0];
                ot += prevToken.v;
                // construct the text
                var i = 0;
                for (var ind in tokens) {
                    if (i == 0) {
                        i++;
                        continue;
                    }

                    var cT = tokens[ind];
                    if ((prevToken.ep + 1) === cT.sp) {
                        ot += " ";
                    }


                    ot += tokenVisitor(i, cT);
                    prevToken = cT;
                    i++;
                }


                return ot;
            }

            var wholeText = {{tokens}};
                    var matches = {{json}};
            var text = constructTextFromTokens(wholeText.tokens, function (i, token) {
                return "<span data-t=" + i + " class='t" + i + "' data-forms='" + JSON.stringify(token.f) + "'>" + token.v + "</span>";
            })


            function highlightMatch(match) {
                if (match.pos.start === match.pos.end) {
                    var className = '.t' + match.pos.start;
                    $(className).css({'background-color': 'yellow', 'padding': '2px 6px'});
                    $(className).addClass('ne');
                } else {
                    var color = getRandomColor();
                    for (var ri = match.pos.start; ri <= match.pos.end; ri++) {
                        var className = '.t' + ri;
                        $(className).css({'background-color': color, 'padding': '2px 6px', 'border': '1px solid gray'});
                        $(className).addClass('ne');
                    }
                }
            }

            var container = document.getElementById('text')

            container.innerHTML = text;

            for (var mInd in matches.items) {
                highlightMatch(matches.items[mInd]);
            }



        </script>
    </body>
</html>